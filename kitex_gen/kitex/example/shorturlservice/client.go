// Code generated by Kitex v0.9.1. DO NOT EDIT.

package shorturlservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	example "gocode/kitex_gen/kitex/example"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Register(ctx context.Context, request *example.RegisterRequest, callOptions ...callopt.Option) (r *example.RegisterResponse, err error)
	Login(ctx context.Context, request *example.LoginRequest, callOptions ...callopt.Option) (r *example.LoginResponse, err error)
	WriteShortUrl(ctx context.Context, request *example.ShortUrlRequest, callOptions ...callopt.Option) (r *example.ShortUrlResponse, err error)
	Redirect(ctx context.Context, request *example.RedirectRequest, callOptions ...callopt.Option) (err error)
	DeleteShortUrl(ctx context.Context, request *example.DeleteShortUrlRequest, callOptions ...callopt.Option) (err error)
	ChangeShortUrl(ctx context.Context, request *example.ChangeShortUrlRequest, callOptions ...callopt.Option) (err error)
	ShowShortUrl(ctx context.Context, request *example.ShowShortUrlRequest, callOptions ...callopt.Option) (r *example.ShowShortUrlResponse, err error)
	RateShortUrl(ctx context.Context, callOptions ...callopt.Option) (r *example.RateShortUrlResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kShortUrlServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kShortUrlServiceClient struct {
	*kClient
}

func (p *kShortUrlServiceClient) Register(ctx context.Context, request *example.RegisterRequest, callOptions ...callopt.Option) (r *example.RegisterResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, request)
}

func (p *kShortUrlServiceClient) Login(ctx context.Context, request *example.LoginRequest, callOptions ...callopt.Option) (r *example.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, request)
}

func (p *kShortUrlServiceClient) WriteShortUrl(ctx context.Context, request *example.ShortUrlRequest, callOptions ...callopt.Option) (r *example.ShortUrlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.WriteShortUrl(ctx, request)
}

func (p *kShortUrlServiceClient) Redirect(ctx context.Context, request *example.RedirectRequest, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Redirect(ctx, request)
}

func (p *kShortUrlServiceClient) DeleteShortUrl(ctx context.Context, request *example.DeleteShortUrlRequest, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.DeleteShortUrl(ctx, request)
}

func (p *kShortUrlServiceClient) ChangeShortUrl(ctx context.Context, request *example.ChangeShortUrlRequest, callOptions ...callopt.Option) (err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ChangeShortUrl(ctx, request)
}

func (p *kShortUrlServiceClient) ShowShortUrl(ctx context.Context, request *example.ShowShortUrlRequest, callOptions ...callopt.Option) (r *example.ShowShortUrlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.ShowShortUrl(ctx, request)
}

func (p *kShortUrlServiceClient) RateShortUrl(ctx context.Context, callOptions ...callopt.Option) (r *example.RateShortUrlResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.RateShortUrl(ctx)
}
